primeiro exemplo não é encadeado:
#include <iostream>
#include <list>

using namespace std;

// Função para remover números ímpares, excluindo o zero, da lista
void removerImpares(list<int>& lista) {
    auto it = lista.begin();
    while (it != lista.end()) {
        if (*it % 2 != 0 || *it == 0) {
            it = lista.erase(it);
        } else {
            ++it;
        }
    }
}

int main() {
    list<int> exemplo;

    int tamanhoList = 10;

    // Preencher a lista com valores de 0 a 9
    for (int i = 0; i < tamanhoList; i++) {
        exemplo.push_front(i);
    }

    cout << "Lista antes da remocao: ";
    for (const auto& elemento : exemplo) {
        cout << elemento << " ";
    }
    cout << "\n\n";

    // Remover números ímpares, excluindo o zero
    removerImpares(exemplo);

    cout << "Lista depois da remocao: ";
    for (const auto& elemento : exemplo) {
        cout << elemento << " ";
    }

    return 0;
}

segundo encadeado:
#include <iostream>
using namespace std;
// Definição da estrutura do nó da lista encadeada
struct Node {
    int data;
    Node* next;

    Node(int value) : data(value), next(nullptr) {}
};

// Definição da classe da lista encadeada
class ListaEncadeada {
private:
    Node* head;

public:
    ListaEncadeada() : head(nullptr) {}

    // Função para adicionar um elemento no final da lista
    void adicionarElemento(int value) {
        Node* novoNo = new Node(value);

        if (!head) {
            head = novoNo;
        } else {
            Node* temp = head;
            while (temp->next) {
                temp = temp->next;
            }
            temp->next = novoNo;
        }
    }

    // Função para remover todos os elementos ímpares da lista
    void removerImpares() {
        Node* atual = head;
        Node* anterior = nullptr;

        while (atual) {
            if (atual->data % 2 != 0) {
                // Remover o nó atual
                Node* temp = atual;
                atual = atual->next;

                if (anterior) {
                    anterior->next = atual;
                } else {
                    head = atual;
                }

                delete temp;
            } else {
                // Avançar para o próximo nó
                anterior = atual;
                atual = atual->next;
            }
        }
    }

    // Função para exibir os elementos da lista
    void exibirLista() {
        Node* temp = head;

        while (temp) {
            cout << temp->data << " ";
            temp = temp->next;
        }

       cout << endl;
    }
};

int main() {
    // Criando a lista encadeada
    ListaEncadeada lista;
    
    // Adicionando elementos à lista
    for (int i = 1; i <= 10; i++) {
        lista.adicionarElemento(i);
    }

    // Exibindo a lista antes da remoção
    cout << "Lista antes da remocão: ";
    lista.exibirLista();

    // Removendo os elementos ímpares
    lista.removerImpares();

    // Exibindo a lista após a remoção
    cout << "Lista depois da remocão: ";
    lista.exibirLista();

    return 0;
}
